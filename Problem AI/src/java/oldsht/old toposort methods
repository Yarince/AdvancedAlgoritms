package oldsht;

import problemAi.Node;

import java.util.HashMap;
import java.util.Stack;

class Thing {

    private HashMap<Character, Node> nodes;

    // A recursive function used by topologicalSort
    private void topologicalSortUtil(Node currentVertex, Stack<Node> stack) {
        // Mark the current node as visited.
        currentVertex.setVisited(true);

        // Recur for all the vertices adjacent to this vertex
        for (Node adjacentVertex : currentVertex.getNeighbours()) {
            if (!adjacentVertex.isVisited()) {
                topologicalSortUtil(adjacentVertex, stack);
            }
        }

        // Push current vertex to stack which stores result
        stack.push(currentVertex);
    }

    // prints a Topological Sort of the complete graph
    public void topologicalSort() {
        Stack<Node> stack = new Stack<>();

        // Mark all the vertices as not visited
        for (Node currentNode : nodes.values()) {
            currentNode.setVisited(false);
        }

        // Call the recursive helper function to store Topological
        // Sort starting from all vertices one by one
        for (Node currentNode : nodes.values()) {
            if (!currentNode.isVisited()) {
                topologicalSortUtil(currentNode, stack);
            }
        }

        // Print contents of stack
        while (!stack.isEmpty()) {
            System.out.print(stack.pop().getData() + " ");
        }
        System.out.println();
    }


    // OLD find stuff // broken
    public Node findInNodes(char target) {

        for (Node mainNode : nodes.values()) {
            Node inNode = findInNode(mainNode, target);
            if (inNode != null)
                return inNode;
        }

        return null;
    }

    private Node findInNode(Node mainNode, char target) {

        if (mainNode.getData() == target)
            return mainNode;


        Node found = null;
        for (Node n : mainNode.getNeighbours()) {
            if (n.getData() == target) {
                found = n;
                break;
            }
            found = findInNode(n, target);
        }

        if (found != null)
            return found;

//        if (!mainNode.getNeighbours().isEmpty())
//            return findInNode(mainNode, target);

        return null;

//        for (Node neighbour : mainNode.getNeighbours()) {
//            Node inNode = findInNode(neighbour, target);
//            if (inNode != null)
//                return inNode;
//        }

//        return null;
    }
}